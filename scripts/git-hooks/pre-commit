#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

# syntax check
git diff --cached --name-only | while read FILE; do
if [[ "$FILE" =~ ^.+(php|inc|module|install|test)$ ]]; then
    # Courtesy of swytsh from the comments below.
    if [[ -f $FILE ]]; then
        php -l "$FILE" 1> /dev/null
        if [ $? -ne 0 ]; then
            echo -e "\e[1;31m\tAborting commit due to files with syntax errors" >&2
            exit 1
        fi
    fi
fi
done


#
# Check for debugging statements before commiting your code.
#

# List of function names to search for in regex format
FUNCTIONS='print_r|var_dump|console\.log'

# If any functions are found as executable, prevent the commit.
DIEONFAIL=false

echo "Running the debugger check..."
RES=`egrep -nr --exclude-dir=".git" "^(\s*)?[^/{2}]($FUNCTIONS)\(.*\)" .`

if [[ -n "$RES" ]]; then
  echo "\n$RES"
  echo "\nDebugging functions were found in your code!"

  if [[ $DIEONFAIL == true ]]; then
    echo "Changes were not committed."
    exit 1;
  else
    echo "You may want to clean these up before you push those changes.\nChanges were committed anyway.\n"
    exit 0;
  fi
else
  echo "\n No debugging functions were found.  Nice job, Ace!\n";
  exit 0;
fi


# run unit tests
git diff --cached --name-only | while read FILE; do
if [[ "$FILE" =~ ^.+(php|inc|module|install|test)$ ]]; then
    /home/wadmiraal/.composer/vendor/bin/phpunit 1> /dev/null
    if [ $? -ne 0 ]; then
      echo -e "\e[1;31m\tUnit tests failed ! Aborting commit." >&2
      exit 1;
    fi
fi
done


